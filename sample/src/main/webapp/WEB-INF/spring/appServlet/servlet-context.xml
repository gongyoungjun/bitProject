<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 어노테이션 방식의 mvc를 사용하겠다는 표시 -->
	<!-- RequestMapping, ModelAttribute, SessionAttribute, RequestParam -->
	<annotation-driven />

	<!--AOP 관련 어노테이션들을 자동으로 인식하고 용도에 맞게 처리해준다. -->
	<aop:aspectj-autoproxy/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving
		up static resources in the ${webappRoot}/resources directory -->
	<!-- js, css파일들은 서블릿 컨테이너를 태우지 않고 바로 매핑해주기위해서 사용 -->
	<resources mapping="/resources/**" location="/resources/" />
	<beans:bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
	    <beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
	    <beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
	    <beans:property name="username" value="togethersquad"></beans:property>
	    <beans:property name="password" value="1234"></beans:property>	  
	</beans:bean>

	<!--1 dataSource생성-->
     <beans:bean id="dataSource"  class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
       <beans:constructor-arg ref="ds"/>
       <beans:property name="logFormatter">
        <beans:bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
           <beans:property name="loggingType" value="MULTI_LINE"/>
           <beans:property name="sqlPrefix" value="SQL: "/>
        </beans:bean>
       </beans:property>       
     </beans:bean>

	<!-- 2.커넥션을 만들어준다. 하지만 연결을맺고, 완료된후 연결을 close하는건 직접 개발자가 해야한다. -->
	<beans:bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="configLocation" value="/WEB-INF/Config.xml"></beans:property>

		<!--TODO 0313 아래 방식으로 mapper 스캔해주시면 좋습니다.
		mapper의 위치는 resources 아래에 두어야합니다.
		케밥대신 카멜케이스로 이름을 생성해주셔야합니다.
		class파일은 앞글자 모두 대문자로 변경해주세요.
		xml 파일은 앞글지 소문자입니다.-->
		<beans:property name="mapperLocations" value="classpath:/mappers/*Mapper.xml" />
	</beans:bean>

	<!-- 3.템플릿은 SqlSession인터페이스를 구현한 클레스로 트랜젝션관리나쓰레드 안정성을 보장하고 데이터 연결과 종료를 책임짐
	@Repository 에서 @sqlSession Autowired해서 사용
	현재 구성하신 extends SqlSessionDaoSupport 방식으로도 사용가능.
	extends 하는 이유는 아래 SqlSessionTemplate구성하는거와 같은이유
	보토 아래와 같이 사용
	@Autowired Sqlsession  sqlSession;
	sqlSession.selectOne("idSearch", email);
	playDao참조
	-->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="ssf" />
	</beans:bean>

	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"></beans:bean>
	<!-- 어노테이션 방식으로 트랜젝션을 사용하겠다는 표시 @Transaction -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

<!-- REQUIRED (default) : 이미 시작된 트랜잭션이 있으면 참여하고 없으면 새로 시작한다. 

· REQUIRES_NEW : 항상 새로운 트랜잭션을 시작한다. 이미 진행 중인 트랜잭션이 있으면 트랜잭션을 잠시 보류시킨다.

· SUPPORTS : 이미 시작된 트랜잭션이 있으면 참여하고, 없으면 트랜잭션없이 진행한다.
 -->	

	<!--xml에서 공통처리 해줄때 사용하는 방법
	service 에서 @Transaction 쓰던, xml에서 패턴잡아서 쓰던 자유
	* 모든 메소드에 트렌젝션 처리하는것은 잘못된 방법입니다.
	 select를 제외한 서비스에 트렌젝션을 걸어주셔야합니다.
	-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
		  <tx:method name="get*" read-only="true" />
		  <tx:method name="select*" read-only="true" />
		  <tx:method name="find*" read-only="true" />
			<!--이런 방식으로 get으로 시작하거나 select 로 시작하는 서비스 명을 제외하고 트랜젝션을 잡아주는것이 좋은데
			read-only="true" 로 설정하면 트랜젝션 발생하지 않습니다.
			현재 프로젝트는 조회 하는 서비스의 규칙이 없어 여러패턴을 추가해주어야 할거같습니다.
			보통 처음 프로젝트 시작할대 조회는 select 로 하자, get으로 하자 정하는편입니다.-->
	      <tx:method name="*" propagation="REQUIRED"/>	     
	    </tx:attributes>	
	</tx:advice>
	<aop:config>
		<!--보통 서비스에 트랜젝션 걸어줍니다. 현재는 서비스가 없으나 서비스 인터페이스가 필요합니다.-->
		<!--pointcut="bean(*ServiceImpl)-->
	     <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.bit.web.play.dao.*.*(..))"/>
	</aop:config>

	<beans:bean id="download" class="com.bit.web.play.vo.DownLoadView"/>
	
	<!-- 경로가 지정되지 않은 view정보를 설정할때 FileDownlaod Ajax -->
	<!--
	InternalResourceView가 1번, BeanNameViewResolver 2번이 좋을거 같습니다.
	경로가 지정되지 않은 빈은 빈도수가 적기 때문에 0순위로 두는건 리소스 낭비입니다.
	-->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	    <beans:property name="order" value="1"></beans:property>
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 실행할 뷰를찾는 역활 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="0"></beans:property>
	</beans:bean>	
	
	<!-- 이미지 다운받는부분. -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	  <beans:property name="defaultEncoding" value="UTF-8"></beans:property>
	  <beans:property name="maxInMemorySize" value="10000000"></beans:property>
	</beans:bean>

	<!-- //TODO 0313 스캔은 상위 package 하나만 써주시면 좋습니다.-->
	<context:component-scan base-package="com.bit.web.play" />
<!--	<context:component-scan base-package="com.bit.web.play.controller" />
	<context:component-scan base-package="com.bit.web.play.dao" />
	<context:component-scan base-package="com.bit.web.play.action" />
	<context:component-scan base-package="com.bit.web.play.vo" />	
	<context:component-scan base-package="com.bit.web.play.email" />-->

	<beans:bean id="loginInter" class="com.bit.web.play.action.IntercepterPro" scope="singleton"></beans:bean>
	<interceptors>
	<interceptor>
	      <mapping path="/loginIntercepter"/>
	      <beans:ref bean="loginInter"/>
<!--	idSearch, pwSearch, playsquadLoginCheck, logoutAction, newMember, ajaxFindID
		등은 로그인체크 없이 실행되어야할 path입니다. 해당 path를 제외해주어야하는데
		보통 /login/으로 시작하여
		/login/idSearch 등으로 @RequestMapping 작성해주시면
		<exclude-mapping path="/login/**"/> 요렇게 처리 가능합니다. -->
		<!--
		관리자 사이트 이용시 디폴트가 로그인필요, 회원가입/로그인 페이지만 예외로 설정합니다 <mapping path="/**" /> 전체 경로로 해주시는것이 일반적입니다.
		반대로 사용자 사이트는 현제처럼 필요한 부분만 로그인 체크 사용합니다.-->
	   </interceptor>
	</interceptors>
</beans:beans>

















